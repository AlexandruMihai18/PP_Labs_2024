#lang racket/gui

;  1. Pentru definitia Racket de mai jos, ce adancime maxima atinge stiva
; in timpul evaluarii expresiei (f 5)?
;  Obs: daca functia ar fi recursiva pe coada, toate apelurile lui
; f s-ar afla la adancime 0, datorita tail-call optimization.
(define (f1 x)
  (cond [(< x 0) x]
        [(odd? x) (f1 (- x 1))]
        [else (+ (f1 (- x 3)) (f1 (- x 4)))]))

; R: 2
; Explicatie:
; L0 : (f 5) -> (f 4) -- tail-call optimization
; L1 :          (+ (f 1) (f 0)), (f 1) -> (f 0)
; L2 :          (+ (+ (f -3) (f -4)) (+ (f -3) (f -4))) --> -14


; 2. Tip de recursivitate? (and why?)
(define (f2 x acc)
  (if (zero? x) acc
      (f2 (sub1 x) (add1 acc))))

; R: recursivitate pe coada pentru ca nu mai realizeaza alte operatii
; dupa aplicatia recursiva


; 3. Ce calculeaza functiile? Care are recursivitate mai eficienta?

(define (f31 a b)
  (if (zero? a)
      b
      (let ((newb (+ 1 b)))
        (f31 (- a 1) newb))))

(define (f32 a b)
  (if (zero? a)
      b
      (let ((newf (f32 (- a 1) b)))
        (+ 1 newf))))

; R: f31 si f32 calculeaza acelasi rezultat, dar f1 are o recursivitate
; mai eficienta decat f2

; 4. 
(define (par? x)
  (or (zero? x)
      (impar? (- x 1))))

(define (impar? x)
  (and (> x 0)
       (par? (- x 1))))

